{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Breakpoints = exports.BreakpointConstraint = void 0;\n\nvar _Utils = require(\"./Utils\");\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? Object(arguments[i]) : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction breakpointKey(breakpoint) {\n  return Array.isArray(breakpoint) ? breakpoint.join(\"-\") : breakpoint;\n}\n\nvar BreakpointConstraint;\n/**\n * Encapsulates all breakpoint data needed by the Media component. The data is\n * generated on initialization so no further runtime work is necessary.\n */\n\nexports.BreakpointConstraint = BreakpointConstraint;\n\n(function (BreakpointConstraint) {\n  BreakpointConstraint[\"at\"] = \"at\";\n  BreakpointConstraint[\"lessThan\"] = \"lessThan\";\n  BreakpointConstraint[\"greaterThan\"] = \"greaterThan\";\n  BreakpointConstraint[\"greaterThanOrEqual\"] = \"greaterThanOrEqual\";\n  BreakpointConstraint[\"between\"] = \"between\";\n})(BreakpointConstraint || (exports.BreakpointConstraint = BreakpointConstraint = {}));\n\nvar Breakpoints = /*#__PURE__*/function () {\n  _createClass(Breakpoints, null, [{\n    key: \"validKeys\",\n    value: function validKeys() {\n      return [BreakpointConstraint.at, BreakpointConstraint.lessThan, BreakpointConstraint.greaterThan, BreakpointConstraint.greaterThanOrEqual, BreakpointConstraint.between];\n    }\n  }]);\n\n  function Breakpoints(_breakpoints) {\n    var _this = this,\n        _this$_mediaQueries;\n\n    _classCallCheck(this, Breakpoints);\n\n    _defineProperty(this, \"_sortedBreakpoints\", void 0);\n\n    _defineProperty(this, \"_breakpoints\", void 0);\n\n    _defineProperty(this, \"_mediaQueries\", void 0);\n\n    _defineProperty(this, \"findBreakpointsForWidths\", function (fromWidth, throughWidth) {\n      var fromBreakpoint = _this.findBreakpointAtWidth(fromWidth);\n\n      if (!fromBreakpoint) {\n        return undefined;\n      }\n\n      var throughBreakpoint = _this.findBreakpointAtWidth(throughWidth);\n\n      if (!throughBreakpoint || fromBreakpoint === throughBreakpoint) {\n        return [fromBreakpoint];\n      } else {\n        return _this._sortedBreakpoints.slice(_this._sortedBreakpoints.indexOf(fromBreakpoint), _this._sortedBreakpoints.indexOf(throughBreakpoint) + 1);\n      }\n    });\n\n    _defineProperty(this, \"findBreakpointAtWidth\", function (width) {\n      return _this._sortedBreakpoints.find(function (breakpoint, i) {\n        var nextBreakpoint = _this._sortedBreakpoints[i + 1];\n\n        if (nextBreakpoint) {\n          return width >= _this._breakpoints[breakpoint] && width < _this._breakpoints[nextBreakpoint];\n        } else {\n          return width >= _this._breakpoints[breakpoint];\n        }\n      });\n    });\n\n    _defineProperty(this, \"valuesWithBreakpointProps\", function (values) {\n      var max = values.length;\n      var valueBreakpoints = [];\n      var lastTuple;\n\n      _this._sortedBreakpoints.forEach(function (breakpoint, i) {\n        var value = values[i];\n\n        if (i < max && (!lastTuple || lastTuple[0] !== value)) {\n          lastTuple = [value, [breakpoint]];\n          valueBreakpoints.push(lastTuple);\n        } else {\n          lastTuple[1].push(breakpoint);\n        }\n      });\n\n      return valueBreakpoints.map(function (_ref, i) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            value = _ref2[0],\n            breakpoints = _ref2[1];\n\n        var props = {};\n\n        if (i === valueBreakpoints.length - 1) {\n          props.greaterThanOrEqual = breakpoints[0];\n        } else if (breakpoints.length === 1) {\n          props.at = breakpoints[0];\n        } else {\n          // TODO: This is less than ideal, would be good to have a `through`\n          //       prop, which unlike `between` is inclusive.\n          props.between = [breakpoints[0], valueBreakpoints[i + 1][1][0]];\n        }\n\n        return [value, props];\n      });\n    });\n\n    this._breakpoints = _breakpoints;\n    this._sortedBreakpoints = Object.keys(_breakpoints).map(function (breakpoint) {\n      return [breakpoint, _breakpoints[breakpoint]];\n    }).sort(function (a, b) {\n      return a[1] < b[1] ? -1 : 1;\n    }).map(function (breakpointAndValue) {\n      return breakpointAndValue[0];\n    }); // List of all possible and valid `between` combinations\n\n    var betweenCombinations = this._sortedBreakpoints.slice(0, -1).reduce(function (acc, b1, i) {\n      return _toConsumableArray(acc).concat(_toConsumableArray(_this._sortedBreakpoints.slice(i + 1).map(function (b2) {\n        return [b1, b2];\n      })));\n    }, []);\n\n    this._mediaQueries = (_this$_mediaQueries = {}, _defineProperty(_this$_mediaQueries, BreakpointConstraint.at, this._createBreakpointQueries(BreakpointConstraint.at, this._sortedBreakpoints)), _defineProperty(_this$_mediaQueries, BreakpointConstraint.lessThan, this._createBreakpointQueries(BreakpointConstraint.lessThan, this._sortedBreakpoints.slice(1))), _defineProperty(_this$_mediaQueries, BreakpointConstraint.greaterThan, this._createBreakpointQueries(BreakpointConstraint.greaterThan, this._sortedBreakpoints.slice(0, -1))), _defineProperty(_this$_mediaQueries, BreakpointConstraint.greaterThanOrEqual, this._createBreakpointQueries(BreakpointConstraint.greaterThanOrEqual, this._sortedBreakpoints)), _defineProperty(_this$_mediaQueries, BreakpointConstraint.between, this._createBreakpointQueries(BreakpointConstraint.between, betweenCombinations)), _this$_mediaQueries);\n  }\n\n  _createClass(Breakpoints, [{\n    key: \"toVisibleAtBreakpointSet\",\n    value: function toVisibleAtBreakpointSet(breakpointProps) {\n      breakpointProps = this._normalizeProps(breakpointProps);\n\n      if (breakpointProps.lessThan) {\n        var breakpointIndex = this.sortedBreakpoints.findIndex(function (bp) {\n          return bp === breakpointProps.lessThan;\n        });\n        return this.sortedBreakpoints.slice(0, breakpointIndex);\n      } else if (breakpointProps.greaterThan) {\n        var _breakpointIndex = this.sortedBreakpoints.findIndex(function (bp) {\n          return bp === breakpointProps.greaterThan;\n        });\n\n        return this.sortedBreakpoints.slice(_breakpointIndex + 1);\n      } else if (breakpointProps.greaterThanOrEqual) {\n        var _breakpointIndex2 = this.sortedBreakpoints.findIndex(function (bp) {\n          return bp === breakpointProps.greaterThanOrEqual;\n        });\n\n        return this.sortedBreakpoints.slice(_breakpointIndex2);\n      } else if (breakpointProps.between) {\n        var between = breakpointProps.between;\n        var fromBreakpointIndex = this.sortedBreakpoints.findIndex(function (bp) {\n          return bp === between[0];\n        });\n        var toBreakpointIndex = this.sortedBreakpoints.findIndex(function (bp) {\n          return bp === between[1];\n        });\n        return this.sortedBreakpoints.slice(fromBreakpointIndex, toBreakpointIndex);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"toRuleSets\",\n    value: function toRuleSets() {\n      var _this2 = this;\n\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Breakpoints.validKeys();\n      var selectedMediaQueries = keys.reduce(function (mediaQueries, query) {\n        mediaQueries[query] = _this2._mediaQueries[query];\n        return mediaQueries;\n      }, {});\n      return Object.entries(selectedMediaQueries).reduce(function (acc, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            type = _ref4[0],\n            queries = _ref4[1];\n\n        queries.forEach(function (query, breakpoint) {\n          // We need to invert the query, such that it matches when we want the\n          // element to be hidden.\n          acc.push((0, _Utils.createRuleSet)((0, _Utils.createClassName)(type, breakpoint), \"not all and \".concat(query)));\n        });\n        return acc;\n      }, []);\n    }\n  }, {\n    key: \"shouldRenderMediaQuery\",\n    value: function shouldRenderMediaQuery(breakpointProps, onlyRenderAt) {\n      var _this3 = this;\n\n      breakpointProps = this._normalizeProps(breakpointProps);\n\n      if (breakpointProps.lessThan) {\n        var width = this._breakpoints[breakpointProps.lessThan];\n        var lowestAllowedWidth = Math.min.apply(Math, _toConsumableArray(onlyRenderAt.map(function (breakpoint) {\n          return _this3._breakpoints[breakpoint];\n        })));\n        return lowestAllowedWidth < width;\n      } else if (breakpointProps.greaterThan) {\n        var _width = this._breakpoints[this._findNextBreakpoint(breakpointProps.greaterThan)];\n\n        var highestAllowedWidth = Math.max.apply(Math, _toConsumableArray(onlyRenderAt.map(function (breakpoint) {\n          return _this3._breakpoints[breakpoint];\n        })));\n        return highestAllowedWidth >= _width;\n      } else if (breakpointProps.greaterThanOrEqual) {\n        var _width2 = this._breakpoints[breakpointProps.greaterThanOrEqual];\n\n        var _highestAllowedWidth = Math.max.apply(Math, _toConsumableArray(onlyRenderAt.map(function (breakpoint) {\n          return _this3._breakpoints[breakpoint];\n        })));\n\n        return _highestAllowedWidth >= _width2;\n      } else if (breakpointProps.between) {\n        // TODO: This is the only useful breakpoint to negate, but we’ll\n        //       we’ll see when/if we need it. We could then also decide\n        //       to add `oustide`.\n        var fromWidth = this._breakpoints[breakpointProps.between[0]];\n        var toWidth = this._breakpoints[breakpointProps.between[1]];\n        var allowedWidths = onlyRenderAt.map(function (breakpoint) {\n          return _this3._breakpoints[breakpoint];\n        });\n        return !(Math.max.apply(Math, _toConsumableArray(allowedWidths)) < fromWidth || Math.min.apply(Math, _toConsumableArray(allowedWidths)) >= toWidth);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_normalizeProps\",\n    value: function _normalizeProps(breakpointProps) {\n      if (breakpointProps.at) {\n        var fromIndex = this._sortedBreakpoints.indexOf(breakpointProps.at);\n\n        var to = this._sortedBreakpoints[fromIndex + 1];\n        return to ? {\n          between: [breakpointProps.at, to]\n        } : {\n          greaterThanOrEqual: breakpointProps.at\n        };\n      }\n\n      return breakpointProps;\n    }\n  }, {\n    key: \"_createBreakpointQuery\",\n    value: function _createBreakpointQuery(breakpointProps) {\n      breakpointProps = this._normalizeProps(breakpointProps);\n\n      if (breakpointProps.lessThan) {\n        var width = this._breakpoints[breakpointProps.lessThan];\n        return \"(max-width:\".concat(width - 0.02, \"px)\");\n      } else if (breakpointProps.greaterThan) {\n        var _width3 = this._breakpoints[this._findNextBreakpoint(breakpointProps.greaterThan)];\n\n        return \"(min-width:\".concat(_width3, \"px)\");\n      } else if (breakpointProps.greaterThanOrEqual) {\n        var _width4 = this._breakpoints[breakpointProps.greaterThanOrEqual];\n        return \"(min-width:\".concat(_width4, \"px)\");\n      } else if (breakpointProps.between) {\n        // TODO: This is the only useful breakpoint to negate, but we’ll\n        //       we’ll see when/if we need it. We could then also decide\n        //       to add `outside`.\n        var fromWidth = this._breakpoints[breakpointProps.between[0]];\n        var toWidth = this._breakpoints[breakpointProps.between[1]];\n        return \"(min-width:\".concat(fromWidth, \"px) and (max-width:\").concat(toWidth - 0.02, \"px)\");\n      }\n\n      throw new Error(\"Unexpected breakpoint props: \".concat(JSON.stringify(breakpointProps)));\n    }\n  }, {\n    key: \"_createBreakpointQueries\",\n    value: function _createBreakpointQueries(key, forBreakpoints) {\n      var _this4 = this;\n\n      return forBreakpoints.reduce(function (map, breakpoint) {\n        map.set(breakpointKey(breakpoint), _this4._createBreakpointQuery(_defineProperty({}, key, breakpoint)));\n        return map;\n      }, new Map());\n    }\n  }, {\n    key: \"_findNextBreakpoint\",\n    value: function _findNextBreakpoint(breakpoint) {\n      var nextBreakpoint = this._sortedBreakpoints[this._sortedBreakpoints.indexOf(breakpoint) + 1];\n\n      if (!nextBreakpoint) {\n        throw new Error(\"There is no breakpoint larger than \".concat(breakpoint));\n      }\n\n      return nextBreakpoint;\n    }\n  }, {\n    key: \"sortedBreakpoints\",\n    get: function get() {\n      return this._sortedBreakpoints;\n    }\n  }, {\n    key: \"dynamicResponsiveMediaQueries\",\n    get: function get() {\n      return Array.from(this._mediaQueries[BreakpointConstraint.at].entries()).reduce(function (acc, _ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            k = _ref6[0],\n            v = _ref6[1];\n\n        return _objectSpread({}, acc, _defineProperty({}, k, v));\n      }, {});\n    }\n  }, {\n    key: \"largestBreakpoint\",\n    get: function get() {\n      return this._sortedBreakpoints[this._sortedBreakpoints.length - 1];\n    }\n  }]);\n\n  return Breakpoints;\n}();\n\nexports.Breakpoints = Breakpoints;","map":null,"metadata":{},"sourceType":"script"}